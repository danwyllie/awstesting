version: 2.1
jobs:
  build-lint:
    docker:
      - image: circleci/python:3.7.3-stretch
    steps:
      - checkout

      - run:
          name: "Setup and Install dependencies"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env
            echo "== Run make =="
            make install
            echo "== Download hadolint =="
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
            echo "== Checking for hadolint =="
            hadolint -v
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: "Run lint"
          command: |
            . venv/bin/activate
            make lint
  
  docker-build-upload:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Docker Build-Login-Upload"
          command: |
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env      
            echo "== Login to docker with envirvonment variables =="
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            echo "== Build docker image =="
            docker build --tag=udacitycapstone .
            echo "== Check for image =="
            docker image ls
            echo "== Tag docker image for upload =="
            docker tag udacitycapstone $DOCKERHUB_USERNAME/udacitycapstone
            echo "== Upload docker image =="
            docker push $DOCKERHUB_USERNAME/udacitycapstone
      - run:
          name: "AWS ECR Build-Login-Upload"
          command: |
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env

  aws-testing:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install tar, gzip & wget packages"
          command: |
            yum install -y tar gzip wget
      - run:
          name: "Ensure AWS ECR exists"
          command: |
            echo "== Check AWS user =="
            aws sts get-caller-identity
            echo "== Check variables =="
            echo "ECR Repository Name: ${ECR_REPO_NAME}"
            echo "== Run check and create if missing =="
            echo "aws ecr create-repository --region "${AWS_DEFAULT_REGION}" --repository-name "${ECR_REPO_NAME}" !!!"
            export ECRCHECK=$(aws ecr describe-repositories --region "${AWS_DEFAULT_REGION}" --repository-names "${ECR_REPO_NAME}")
            if [ -z "$ECRCHECK" ]
            then
              echo "== Target ECR Not found! Creating required ECR... =="
              aws ecr create-repository --region "${AWS_DEFAULT_REGION}" --repository-name "${ECR_REPO_NAME}"
            else
              echo "== Target ECR Found, OK to proceed =="
            fi
      - run:
          name: "Download eksctl"
          command: |
            echo "== Check version and download if missing =="
            export EKSCTLCHECK=$(eksctl version)
            if [ -z "$EKSCTLCHECK" ]
            then
              echo "== eksctl not found, downloading =="
              wget https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz
              echo "== create temp folder =="
              mkdir eksctl
              echo "== extract the download =="
              tar -xf eksctl_Linux_amd64.tar.gz -C ./eksctl
              echo "== move eksctl to bin =="
              mv ./eksctl/eksctl /usr/local/bin
              echo "== check version =="
              eksctl version
            else
              echo "== eksctl found =="
              eksctl version
            fi
      - run:
          name: "Download kubectl"
          command: |
            echo "== Check version and download if missing =="
            export KUBECTLCHECK=$(kubectl version --short --client | grep 'Client Version' | awk '{print $3}')
            if [ -z "$KUBECTLCHECK" ]
            then
              echo "== kubectl not found, downloading =="
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              echo "== install kubectl =="
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              echo "== check version =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            else
              echo "== kubectl found =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            fi
#      - run:
#          name: "Create new EKS cluster"
#          no_output_timeout: 30m
#          command: |
#            ls -ltrh
#            echo "== Creating EKS Cluster using eksctl =="
#            eksctl create cluster -f eksyml/creategreencluster.yml
      - run:
          name: "Verify EKS cluster & deploy replacement"
          no_output_timeout: 30m
          command: |
            echo "== Checking for previous Blue cluster =="
            export ExistingBlueCluster=($(aws eks list-clusters --output text | grep blue | awk '{print $2}'))
            echo $ExistingBlueCluster
            echo "== Checking for previous Green cluster =="
            export ExistingGreenCluster=($(aws eks list-clusters --output text | grep green | awk '{print $2}'))
            echo $ExistingGreenCluster
            if [[ "$ExistingBlueCluster" == *blue ]]
            then
              export LastCluster=$ExistingBlueCluster
              echo "Existing Blue cluster found, building replacement Green cluster..."
              echo "== Creating EKS Cluster using eksctl =="
              eksctl create cluster -f eksyml/creategreencluster.yml

            elif [[ "$ExistingGreenCluster" == *green ]]
            then
              export LastCluster=$ExistingGreenCluster
              echo "Existing Green cluster found, building replacement Blue cluster..."
              echo "== Creating EKS Cluster using eksctl =="
              eksctl create cluster -f eksyml/createbluecluster.yml


#            eksctl create cluster --name udacitycapstone-${CIRCLE_WORKFLOW_ID:0:7} --nodes=2 --region ${AWS_DEFAULT_REGION}

#            ECRCHECK=$(aws ecr describe-repositories --region "${AWS_DEFAULT_REGION}" --repository-names "${ECR_REPO_NAME}")
#            if [ -z "$ECRCHECK" ]
#            then
#              echo "== Target AWS ECR not found. Creating ECR to use =="
#              aws ecr create-repository --region $AWS_DEFAULT_REGION --repository-name $ECR_REPO_NAME
#              echo "== Checking ECR now found =="
#              aws ecr describe-repositories --region $AWS_DEFAULT_REGION --repository-names $ECR_REPO_NAME
#              echo "== Grabbing ECR URI =="
#              aws ecr describe-repositories --region $AWS_DEFAULT_REGION --repository-names $ECR_REPO_NAME --query "repositories[0].repositoryUri" --output text
#            else
#              echo "== ECR Found, grabbing target URI =="
#              aws ecr describe-repositories --region $AWS_DEFAULT_REGION --repository-names $ECR_REPO_NAME --query "repositories[0].repositoryUri" --output text
#            fi

#            echo "== List eks clusters =="
#            aws eks list-clusters
#            echo "== Check eksctl version =="
#            eksctl version
#            echo "== Get clusters =="
#            eksctl get cluster

workflows:
  default:
    jobs:
      #- build-lint
      #- docker-build-upload:
      #    requires: [build-lint]
      - aws-testing