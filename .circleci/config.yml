version: 2.1
jobs:
  build-lint:
    docker:
      - image: circleci/python:3.7.3-stretch
    steps:
      - checkout

      - run:
          name: "Setup and Install dependencies"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env
            echo "== Run make =="
            make install
            echo "== Download hadolint =="
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
            echo "== Checking for hadolint =="
            hadolint -v
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: "Run lint"
          command: |
            . venv/bin/activate
            make lint
  
  docker-build-upload:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Docker Build-Login-Upload"
          command: |
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env      
            echo "== Login to docker with envirvonment variables =="
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            echo "== Build docker image =="
            docker build --tag=udacitycapstone .
            echo "== Check for image =="
            docker image ls
            echo "== Tag docker image for upload =="
            docker tag udacitycapstone $DOCKERHUB_USERNAME/udacitycapstone
            echo "== Upload docker image =="
            docker push $DOCKERHUB_USERNAME/udacitycapstone
      - run:
          name: "AWS ECR Build-Login-Upload"
          command: |
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env

  aws-testing:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install tar, gzip & wget packages"
          command: |
            yum install -y tar gzip wget
      - run:
          name: "Testing aws commands"
          command: |
            echo "== Check AWS user =="
            aws sts get-caller-identity
            echo "== Check variables =="
            echo "ECR Repository Name: ${ECR_REPO_NAME}"
            echo "== Run check and create if missing =="
            echo "aws ecr create-repository --region "${AWS_DEFAULT_REGION}" --repository-name "${ECR_REPO_NAME}" !!!"
            export ECRCHECK=$(aws ecr describe-repositories --region "${AWS_DEFAULT_REGION}" --repository-names "${ECR_REPO_NAME}")
            if [ -z "$ECRCHECK" ]
            then
              echo "== Target ECR Not found! Creating required ECR... =="
              aws ecr create-repository --region "${AWS_DEFAULT_REGION}" --repository-name "${ECR_REPO_NAME}"
            else
              echo "== Target ECR Found, OK to proceed =="
            fi
      - run:
          name: "Download eksctl"
          command: |
            echo "== Check version and download if missing =="
            export EKSCTLCHECK=$(eksctl version)
            if [ -z "$EKSCTLCHECK" ]
            then
              echo "== eksctl not found, downloading.."
              wget https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz
              mkdir eksctl
              tar -xf eksctl_Linux_amd64.tar.gz -C ./eksctl
              mv ./eksctl/eksctl /usr/local/bin
              eksctl -version
            else
              echo "== eksctl found =="
              eksctl -version
            fi

#            ECRCHECK=$(aws ecr describe-repositories --region "${AWS_DEFAULT_REGION}" --repository-names "${ECR_REPO_NAME}")
#            if [ -z "$ECRCHECK" ]
#            then
#              echo "== Target AWS ECR not found. Creating ECR to use =="
#              aws ecr create-repository --region $AWS_DEFAULT_REGION --repository-name $ECR_REPO_NAME
#              echo "== Checking ECR now found =="
#              aws ecr describe-repositories --region $AWS_DEFAULT_REGION --repository-names $ECR_REPO_NAME
#              echo "== Grabbing ECR URI =="
#              aws ecr describe-repositories --region $AWS_DEFAULT_REGION --repository-names $ECR_REPO_NAME --query "repositories[0].repositoryUri" --output text
#            else
#              echo "== ECR Found, grabbing target URI =="
#              aws ecr describe-repositories --region $AWS_DEFAULT_REGION --repository-names $ECR_REPO_NAME --query "repositories[0].repositoryUri" --output text
#            fi

#            echo "== List eks clusters =="
#            aws eks list-clusters
#            echo "== Check eksctl version =="
#            eksctl version
#            echo "== Get clusters =="
#            eksctl get cluster

workflows:
  default:
    jobs:
      #- build-lint
      #- docker-build-upload:
      #    requires: [build-lint]
      - aws-testing